const binMeta: string = ""; export default binMeta;